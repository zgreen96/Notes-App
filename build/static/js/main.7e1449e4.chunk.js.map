{"version":3,"sources":["logo.svg","components/NotesBody.js","components/TopBar.js","components/SideBar.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NotesBody","props","classes","note","currentNote","state","handleBodyChange","bind","renderNote","handleTitleChange","someProp","console","log","this","setState","event","body","target","value","dateTime","Date","now","handleChange","title","locked","Paper","className","paper","Grid","container","spacing","item","xs","style","textAlign","TextField","id","field","rowsMax","rows","onChange","InputProps","input","multiline","variant","disabled","React","Component","withStyles","theme","width","height","padding","flexGrow","paddingLeft","paddingRight","marginTop","display","verticalAlign","fontSize","withTheme","muiTheme","createMuiTheme","palette","primary","main","secondary","TopBar","onDelete","deleteNote","onAddNote","addNote","onLockNote","docID","lockNote","onSearch","term","newList","data","filter","toLowerCase","includes","search","slider","open","runScript","e","which","keyCode","filtered","length","grow","AppBar","appbar","Toolbar","Typography","color","buttons","IconButton","menuButton","onClick","Tooltip","arrow","icon","faTrashAlt","faEdit","faLock","searchIcon","InputBase","placeholder","root","inputRoot","inputInput","inputProps","onKeyPress","faLockOpen","position","zIndex","background","marginRight","borderRadius","shape","backgroundColor","fade","common","white","marginLeft","breakpoints","up","pointerEvents","alignItems","justifyContent","transition","transitions","create","Sidebar","notes","pages","noteToggle","renderList","page","toggleNote","that","items","List","map","key","ListItem","disableGutters","Button","activeclassname","active","button","ListItemText","moment","date","format","a","noteInList","substring","push","Drawer","drawer","anchor","drawerPaper","paddingTop","flexDirection","paddingBottom","maxHeight","colors","blueGrey","textTransform","letterSpacing","fontWeight","borderBottom","borderTop","inline","API_URL","window","location","protocol","hostname","Main","openSideBar","bool","openBar","newNote","docid","characters","x","charAt","Math","floor","random","unshift","fetch","method","headers","Accept","JSON","stringify","then","res","ok","Error","i","pickNote","noteID","cNote","c","updateNote","alert","SideBar","App","loadNotes","response","json","catch","error","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e1449e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Paper, TextField, Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    paper: {\n        width: '90%',\n        height: '100%',\n        padding: theme.spacing(2),\n        flexGrow: 1,\n        paddingLeft: 300,\n        paddingRight: 300,\n        marginTop: 15,\n        display: 'flex'\n    },\n    field: {\n        width: '90%',\n        verticalAlign: 'middle'\n    },\n    title: {\n        fontSize: 18\n    },\n    body: {\n        fontSize: 12\n    }\n})\n\nclass NotesBody extends React.Component {\n    constructor(props) {\n        super(props);\n        this.classes = props.classes;\n        var note = props.currentNote;\n        this.state = {\n            note: note\n        }\n        this.handleBodyChange = this.handleBodyChange.bind(this);\n        this.renderNote = this.renderNote.bind(this);\n        this.handleTitleChange = this.handleTitleChange.bind(this);\n    }\n\n    componentWillReceiveProps(someProp) {\n        console.log(someProp.currentNote);\n        this.setState({\n            note: someProp.currentNote\n        })\n    }\n\n    //on body change, update current note for Sidebar and database\n    handleBodyChange(event) {\n        var currentNote = this.state.note;\n        currentNote.body = event.target.value\n        currentNote.dateTime = Date.now()\n        this.setState({\n            note: currentNote\n        })\n        this.props.handleChange(currentNote);\n    }\n\n    //on title change, update current note for Sidebar and database\n    handleTitleChange(event) {\n        var currentNote = this.state.note;\n        currentNote.title = event.target.value\n        currentNote.dateTime = Date.now()\n        this.setState({\n            note: currentNote\n        })\n        this.props.handleChange(currentNote);\n    }\n\n    renderNote(currentNote){\n        if(currentNote.locked === false){\n            return(                                                                         //can shorten this\n                <Paper className={this.classes.paper}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={9} style={{ textAlign: 'left' }}>\n                                <TextField\n                                    id='title'\n                                    className={this.classes.field}\n                                    rowsMax=\"1\"\n                                    rows='1'\n                                    onChange={ this.handleTitleChange }\n                                    InputProps={{\n                                        classes: {\n                                            input: this.classes.title\n                                        }\n                                    }}\n                                    value={currentNote.title}\n                                />\n                            </Grid>\n                            <Grid item xs={9} style={{ textAlign: 'left' }}>\n                                <TextField\n                                    id='outlined-textarea'\n                                    className={this.classes.field}\n                                    InputProps={{\n                                        classes: {\n                                            input: this.classes.body\n                                        }\n                                    }}\n                                    rows='40'\n                                    rowsMax='40'\n                                    multiline\n                                    variant='outlined'\n                                    value={currentNote.body}\n                                    onChange={this.handleBodyChange}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Paper>\n            )\n        }\n        //disable text fields if note is locked\n        else{\n            return(\n                <Paper className={this.classes.paper}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={9} style={{ textAlign: 'left' }}>\n                                <TextField\n                                    id='title'\n                                    className={this.classes.field}\n                                    rowsMax=\"1\"\n                                    rows='1'\n                                    onChange={() => { this.handleChange() }}\n                                    InputProps={{\n                                        classes: {\n                                            input: this.classes.title\n                                        }\n                                    }}\n                                    value={currentNote.title}\n                                    disabled={true}\n                                />\n                            </Grid>\n                            <Grid item xs={9} style={{ textAlign: 'left' }}>\n                                <TextField\n                                    id='outlined-textarea'\n                                    className={this.classes.field}\n                                    InputProps={{\n                                        classes: {\n                                            input: this.classes.body\n                                        }\n                                    }}\n                                    rows='40'\n                                    rowsMax='40'\n                                    multiline\n                                    variant='outlined'\n                                    value={currentNote.body}\n                                    onChange={this.handleChange}\n                                    disabled={true}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Paper>\n            )\n        }\n    }\n\n    render() {\n        var currentNote = this.state.note;\n        return (\n            <div>\n                {this.renderNote(currentNote)}\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NotesBody);","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faEdit, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons';\nimport MenuIcon from '@material-ui/icons/MenuOpen';\nimport { withStyles, MuiThemeProvider, createMuiTheme, fade } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport AppBar from '@material-ui/core/AppBar';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from '@material-ui/core/InputBase';\nimport { Toolbar, Typography, Tooltip } from '@material-ui/core';\n\nconst muiTheme = createMuiTheme({\n    palette: {\n        primary: { main: '#d9d9d9' },\n        secondary: { main: '#525252' }\n    }\n})\n\nconst styles = theme => ({\n    grow: {\n        flexGrow: 1,\n    },\n    appbar: {\n        position: 'fixed',\n        zIndex: 3,\n        background: '#d9d9d9'\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        position: 'relative',\n    },\n    buttons: {\n        paddingLeft: 125,\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginRight: theme.spacing(2),\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(3),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        width: theme.spacing(7),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 7),\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        /*    [theme.breakpoints.up('md')]: {\n                width: 200,\n            },*/\n    }\n});\n\nclass TopBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.classes = props.classes;\n        var notes = props.data;\n        var currentNote = props.currentNote\n        this.onDelete = this.onDelete.bind(this);\n        this.onAddNote = this.onAddNote.bind(this);\n        this.onLockNote = this.onLockNote.bind(this);\n        this.onSearch = this.onSearch.bind(this);\n        this.slider = this.slider.bind(this);\n        this.runScript = this.runScript.bind(this);\n    }\n\n    //callback delete\n    onDelete = () => {\n        this.props.deleteNote();\n    }\n\n    //callback add note\n    onAddNote = () => {\n        this.props.addNote();\n    }\n\n    //callback lock note\n    onLockNote = (docID) => {\n        this.props.lockNote();\n    }\n\n    //filter items and callback \n    onSearch = (event) => {\n        var term = event.target.value;\n        \n        var items = [];\n        var newList = [];\n        if(term !== \"\"){\n            items = this.props.data;                            //store current notes so filtered list doesn't save over all notes\n            newList = items.filter(item => {\n                return (item.title.toLowerCase().includes(term) || item.body.toLowerCase().includes(term));\n            })\n        }\n        else{\n            newList = this.props.data\n        }\n        this.props.search(newList)\n    }\n\n    //drawer callback\n    slider = () => {\n        this.props.open();\n    }\n\n    //on Enter key press, addNote\n    runScript(e){\n        if(e.which === 13 || e.keyCode === 13){\n            if(this.props.filtered.length === 0){\n                this.props.addNote(e.target.value)\n            }\n        }\n    }\n\n    //List icons and search bar\n    render() {\n        console.log(this.props.currentNote);\n        if (this.props.currentNote.locked === false) {\n            return (                                                                        //shorten this\n                <MuiThemeProvider theme={muiTheme}>\n                    <div className={this.classes.grow}>\n                        <AppBar className={this.classes.appbar}>\n                            <Toolbar>\n                                <Typography variant='h6' color='inherit' id='title'>\n                                    My Notes\n                                </Typography>                                                   \n                                <div className={this.classes.buttons}>\n                                    <IconButton\n                                        className={this.classes.menuButton}\n                                        color='inherit'\n                                        onClick={() => { this.slider() }}\n                                    >\n                                        <Tooltip title='show/hide list' arrow>\n                                            <MenuIcon fontSize='large' />\n                                        </Tooltip>\n                                    </IconButton>\n                                    <IconButton\n                                        className={this.classes.menuButton}\n                                        color='inherit'\n                                        onClick={() => { this.onDelete() }}\n                                    >\n\n                                        <FontAwesomeIcon icon={faTrashAlt} title='Delete' />\n                                    </IconButton>\n                                    <IconButton\n                                        className={this.classes.menuButton}\n                                        color='inherit'\n                                        onClick={() => { this.onAddNote() }}\n                                    >\n\n                                        <FontAwesomeIcon icon={faEdit} />\n                                    </IconButton>\n                                    <IconButton\n                                        className={this.classes.menuButton}\n                                        color='inherit'\n                                        onClick={() => { this.onLockNote() }}\n                                    >\n                                        <FontAwesomeIcon icon={faLock} />\n                                    </IconButton>\n                                </div>\n                                <div className={this.classes.search}>\n                                    <div className={this.classes.searchIcon}>\n                                        <SearchIcon />\n                                    </div>\n                                    <InputBase\n                                        placeholder=\"Search…\"\n                                        classes={{\n                                            root: this.classes.inputRoot,\n                                            input: this.classes.inputInput,\n                                        }}\n                                        inputProps={{ 'aria-label': 'search' }}\n                                        onChange={this.onSearch}\n                                        onKeyPress={this.runScript} \n                                    />\n                                </div>\n\n                            </Toolbar>\n                        </AppBar>\n                    </div>\n                </MuiThemeProvider>\n            )\n        } else {\n            return (\n                <MuiThemeProvider theme={muiTheme}>\n                <div className={this.classes.grow}>\n                    <AppBar className={this.classes.appbar}>\n                        <Toolbar>\n                            <Typography variant='h6' color='inherit' id='title'>\n                                My Notes\n                            </Typography>\n                            <div className={this.classes.buttons}>\n                                <IconButton\n                                    className={this.classes.menuButton}\n                                    color='inherit'\n                                    onClick={() => { this.slider() }}\n                                >\n                                    <Tooltip title='show/hide list' arrow>\n                                        <MenuIcon fontSize='large' />\n                                    </Tooltip>\n                                </IconButton>\n                                <IconButton\n                                    className={this.classes.menuButton}\n                                    color='inherit'\n                                    onClick={() => { this.onDelete() }}\n                                >\n\n                                    <FontAwesomeIcon icon={faTrashAlt} title='Delete' />\n                                </IconButton>\n                                <IconButton\n                                    className={this.classes.menuButton}\n                                    color='inherit'\n                                    onClick={() => { this.onAddNote() }}\n                                >\n\n                                    <FontAwesomeIcon icon={faEdit} />\n                                </IconButton>\n                                <IconButton\n                                    className={this.classes.menuButton}\n                                    color='inherit'\n                                    onClick={() => { this.onLockNote() }}\n                                >\n                                    <FontAwesomeIcon icon={faLockOpen} />\n                                </IconButton>\n                            </div>\n                            <div className={this.classes.search}>\n                                <div className={this.classes.searchIcon}>\n                                    <SearchIcon />\n                                </div>\n                                <InputBase\n                                    placeholder=\"Search…\"\n                                    classes={{\n                                        root: this.classes.inputRoot,\n                                        input: this.classes.inputInput,\n                                    }}\n                                    inputProps={{ 'aria-label': 'search' }}\n                                    onChange={this.onSearch}\n                                    onKeyPress={this.runScript} \n                                />\n                            </div>\n\n                        </Toolbar>\n                    </AppBar>\n                </div>\n            </MuiThemeProvider>\n            )\n        }\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(TopBar);","import React from 'react';\nimport { Drawer, List, ListItem, ListItemText, colors, Button } from '@material-ui/core/';\nimport { withStyles } from '@material-ui/core/styles';\nimport moment from 'moment'\n\nconst styles = theme => ({\n    drawer: {\n        width: 240,\n        paddingTop: 64,\n        height: 'calc(100% - 64px)',\n        /*     [theme.breakpoints.up('lg')]: {\n                 paddingTop: 64,\n                 height: 'calc(100% - 64px)'\n             },*/\n        zIndex: 0,\n    },\n    drawerPaper: {\n        width: 240,\n        zIndex: 0,\n        paddingTop: 87\n    },\n    root: {\n        backgroundColor: 'white',                                       //can change to grey\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n            paddingTop: theme.spacing(2),\n    },\n    item: {\n        display: 'flex',\n        paddingTop: 5,\n        paddingBottom: 65,\n        maxHeight: '30px',\n\n    },\n    button: {\n        color: colors.blueGrey[800],\n        padding: '5 0 10',\n        justifyContent: 'flex-start',\n        textTransform: 'none',\n        letterSpacing: 0,\n        width: '100%',\n        fontWeight: 'normal',\n        borderBottom: \"1px solid rgb(212, 212, 212)\",\n        borderTop: \"1px solid rgb(212, 212, 212)\"\n    },\n    active: {                                                     //Can update code to keep button highlighted until new button pressed\n        backgroundColor: '#cccccc',\n        fontWeight: 'normal',\n    },\n    inline: {\n        display: 'inline',\n    },\n});\n\nclass Sidebar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.classes = props.classes;\n        var notes = props.data;\n        var filtered = this.props.filtered;\n        this.state = {\n            notes: notes,\n            currentNote: {},\n            pages: [],\n            filtered: filtered\n        }\n        this.noteToggle = this.noteToggle.bind(this);\n        this.renderList = this.renderList.bind(this);\n    }\n\n    //toggle current note\n    noteToggle(page) {\n        console.log(page);\n        this.props.toggleNote(page.docID);\n    }\n\n    //render notes in list format\n    renderList(pages) {\n        const that = this;\n        var items = pages;\n\n        return (\n            <List>\n                {items.map(function (page, key) {                                               //map items to make it a dynamic list\n                    return (\n                        <div key={key}>\n                            <ListItem\n                                className={that.classes.item}\n                                disableGutters\n                                key={key}\n                            >\n                                <Button\n                                    activeclassname={that.classes.active}\n                                    className={that.classes.button}\n                                    key={key}\n                                    onClick={() => that.noteToggle(page)}\n                                >\n                                    <ListItemText\n                                        primary={page.title}\n                                        secondary={moment(page.date).format('MM-DD-YY') + \" \" + page.body}\n                                        key={key}\n                                    >\n                                    </ListItemText>\n                                </Button>\n                            </ListItem>\n                        </div>\n                    )\n                }\n                )}\n            </List>\n        )\n    }\n\n    render() {\n        //set list items\n        var pages = [];\n        var items = this.props.filtered;\n        \n        //cut notes' bodies to 12 characters to preview in sidebar\n        if (items) {\n            for (var a = 0; a < items.length; a++) {\n                var noteInList = {\n                    title: items[a].title,\n                    date: items[a].dateTime,\n                    body: items[a].body.substring(0, 12),\n                    docID: items[a].docID\n                }\n                pages.push(noteInList);\n            }\n        }\n        return (\n            <Drawer\n                className={this.classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={this.props.open}\n                classes={{\n                    paper: this.classes.drawerPaper,\n                }}\n            >\n                {this.renderList(pages)}\n            </Drawer>\n        )\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(Sidebar);\n\n\n","import React, { Component } from 'react';\nimport NotesBody from './NotesBody';\nimport TopBar from './TopBar';\nimport SideBar from './SideBar';\n\nvar API_URL = \"http://localhost:8080\";\nAPI_URL = window.location.protocol + '//' + window.location.hostname\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        console.log(props.data);\n        var notes = props.data;\n        //console.log(notes);\n        this.state = ({\n            notes: notes,\n            openBar: true,\n            currentNote: notes[0],\n            filtered: notes\n        });\n        this.deleteNote = this.deleteNote.bind(this);\n        this.openSideBar = this.openSideBar.bind(this);\n        this.addNote = this.addNote.bind(this);\n        this.lockNote = this.lockNote.bind(this);\n        this.pickNote = this.pickNote.bind(this);\n        this.search = this.search.bind(this);\n        this.updateNote = this.updateNote.bind(this);\n    }\n\n    //delete note\n    deleteNote() {\n        var items = [];\n        if (this.state.currentNote.locked === false) {\n\n            //addNotes except current to an array\n            for (var a = 0; a < this.state.notes.length; a++) {\n                if (this.state.notes[a].docID !== this.state.currentNote.docID) {\n                    items.push(this.state.notes[a]);\n                }\n            }\n\n            var id = this.state.currentNote.docID;\n            console.log(id);\n\n            //update DB \n            fetch(API_URL + '/deleteNote/' + id, { method: 'DELETE' })\n                .then(res => {\n                    if (res.ok) {\n                        console.log('delete succesful');\n\n                    }\n                    else {\n                        throw new Error('something went wrong')\n                    }\n                })\n                .then(res => {\n                    this.setState({\n                        notes: items,\n                        currentNote: items[0] || {},\n                        filtered: items\n                    })\n                    //Always maintain at least one note in the list\n                    if(items.length < 1){\n                        this.addNote();\n                    }\n                });\n\n        }\n        else {\n            //note must be unlocked to delete\n            alert('Please select an unlocked note or unlock this one to continue')\n        }\n        \n    }\n\n    //open side bar\n    openSideBar = () => {\n        var bool = this.state.openBar;\n        this.setState({\n            openBar: !bool\n        });\n    }\n\n    //add note\n    addNote = (title) => {\n        var newNote;\n\n        //generate random docID\n        var docid = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for(var x = 0; x < 8; x++){\n            docid += characters.charAt(Math.floor(Math.random() * characters.length));\n        }\n        \n        //create new note\n        if (title) {\n            newNote = {\n                title: title,\n                body: '',\n                dateTime: Date.now(),\n                locked: false,\n                docID: docid\n            }\n        }\n        else {\n            newNote = {\n                title: 'New Note',\n                body: '',\n                dateTime: Date.now(),\n                locked: false,\n                docID: docid\n            }\n        }\n\n        //add note to notes and update DB with API call\n        var items = this.state.notes;\n        items.unshift(newNote);\n        fetch(API_URL + '/newNote', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newNote)\n        }).then(res => {\n            if (res.ok) {\n                console.log('newNote added');\n            }\n            else {\n                throw new Error('something went wrong')\n            }\n        })\n            .then(res => {\n                this.setState({\n                    notes: items,\n                    currentNote: newNote,\n                    filtered: items\n                })\n            })\n    }\n\n    //lock note\n    lockNote = () => {\n        var note = this.state.currentNote;\n        var items = [];\n\n        //delete note then add new one with same fields as current note and locked = !value\n        for (var i = 0; i < this.state.notes.length; i++) {\n            if (this.state.notes[i].docID !== this.state.currentNote.docID) {\n                items.push(this.state.notes[i]);\n            }\n        }\n\n        if (this.state.currentNote) {\n            if (this.state.currentNote.locked === false) {\n                note.locked = true;\n                items.unshift(note);\n                fetch(API_URL + '/updateNote/' + note.docID, {\n                    method: 'PUT',\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(note)\n                }).then(res => {\n                    this.setState({\n                        notes: items,\n                        currentNote: note\n                    })\n                })\n            }\n            else {\n                note.locked = false;\n                items.unshift(note);\n                fetch(API_URL + '/updateNote/' + note.docID, {\n                    method: 'PUT',\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(note)\n                }).then(res => {\n                    this.setState({\n                        notes: items,\n                        currentNote: note,\n                        filtered: items\n                    })\n                })\n            }\n        }\n    }\n\n    //toggle notes\n    pickNote = (noteID) => {\n\n        //get noteID from sideBar. Find note in docID and update state so clicked note displays in body\n        var cNote;\n        var notes = this.state.notes;\n        for (var c = 0; c < this.state.notes.length; c++) {\n            if (notes[c].docID === noteID) {\n                cNote = notes[c];\n                break;\n            }\n        }\n        console.log(cNote);\n        this.setState({\n            currentNote: cNote\n        })\n    }\n\n    //send sideBar the list of filtered items\n    search = (items) => {\n        this.setState({\n            filtered: items\n        })\n    }\n\n    //updateNote in body and sideBar\n    updateNote = (note) => {\n\n        //receive note from body and then make api call\n        var items = [];\n        for (var i = 0; i < this.state.notes.length; i++) {\n            if (this.state.notes[i].docID !== this.state.currentNote.docID) {\n                items.push(this.state.notes[i]);\n            }\n        }\n        items.unshift(note);\n\n        fetch(API_URL + '/updateNote/' + note.docID, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(note)\n        }).then(res => {\n            this.setState({\n                notes: items,\n                currentNote: note,\n                filtered: items\n            })\n        })\n    }\n\n    render() {\n        console.log(this.state.notes || 0);\n        console.log(this.state.currentNote);\n        var notes = this.state.notes\n        if (this.state.notes) {\n            return (\n                <div className='root'>\n                    <TopBar\n                        key={'top'}\n                        data={this.state.notes}\n                        deleteNote={this.deleteNote}\n                        addNote={this.addNote}\n                        lockNote={this.lockNote}\n                        open={this.openSideBar}\n                        search={this.search}\n                        currentNote={this.state.currentNote}\n                        filtered={this.state.filtered} />\n                    <SideBar key={this.state.notes.length}\n                        data={notes}\n                        currentNote={this.state.currentNote}\n                        open={this.state.openBar}\n                        toggleNote={this.pickNote}\n                        addNote={this.addNote}\n                        deleteNote={this.deleteNote}\n                        filtered={this.state.filtered}\n                    />\n                    <main className='content'>\n                        <NotesBody\n                            key={'body'}\n                            currentNote={this.state.currentNote}\n                            handleChange={this.updateNote}\n                        />\n                    </main>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <h3>Data Loading... </h3>\n                </div>\n            )\n        }\n\n    }\n\n}\n\nexport default Main;\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\n\nvar API_URL = \"http://localhost:8080/notes\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n    }\n  }\n\n  //load notes data\n  async componentDidMount() {\n    API_URL = window.location.protocol + '//' + window.location.hostname + '/notes';\n    var items = await this.loadNotes();\n  }\n\n  async loadNotes() {\n    API_URL = window.location.protocol + '//' + window.location.hostname + '/notes';\n    await fetch(API_URL)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        else {\n          console.log(response);\n          throw new Error('response returned error code');\n        }\n      }).catch(error => console.log(error))\n      .then(response => {\n        this.setState({\n          notes: response,\n        })\n      });\n  }\n\n  render() {\n    var data = this.state.notes;\n    console.log(data);\n    if (data) {\n      if (this.state.notes.length < 1) {\n        this.loadNotes();\n      }\n      else {\n        return (\n          <div id='root'>\n            <Main data={data} key={'main'} />\n          </div>\n        )\n      }\n    }\n\n    return <div>Data Loading...</div>;                        //can change to centered loading gif of some kind\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}